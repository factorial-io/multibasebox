<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeForm;

/**
 * Implements hook_form_alter().
 */
function override_node_options_form_alter(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof NodeForm) {
    /** @var \Drupal\Core\Session\AccountInterface $account */
    $user = \Drupal::currentUser();
    if ($user->hasPermission('administer nodes')) {
      return;
    }
    $node_type = $form_object->getEntity()->bundle();

    $form['promote']['#access'] = $user->hasPermission("override $node_type promote to front page option");

    $form['sticky']['#access'] = $user->hasPermission("override $node_type sticky option");

    $form['revision']['#access'] = $user->hasPermission("override $node_type revision option");

    $form['revision_log']['#access'] = $user->hasPermission("override $node_type revision log entry");

    $form['created']['#access'] = $user->hasPermission("override $node_type authored on option");

    $form['uid']['#access'] = $user->hasPermission("override $node_type authored by option");
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * @see NodeForm::actions()
 *
 * @todo Remove when https://www.drupal.org/node/1901216 is fixed.
 */
function override_node_options_entity_type_alter(array &$entity_types) {
  // Set the node form class to OverrideNodeOptionsNodeForm so that we can
  // override NodeForm::actions() and allow for overriding the publish option.
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  $entity_types['node']->setFormClass('default', '\Drupal\override_node_options\Form\OverrideNodeOptionsNodeForm');
  $entity_types['node']->setFormClass('edit', '\Drupal\override_node_options\Form\OverrideNodeOptionsNodeForm');
}
