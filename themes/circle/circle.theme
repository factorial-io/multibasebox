<?php
use Drupal\image\Entity\ImageStyle;

/**
* Implements hook_preprocess_menu()
* Adds a social media class depending on URL
*/
function circle_preprocess_menu__social_media(&$variables) {
  foreach ($variables['items'] as $key => $item) {
    $url = $item['url']->toString();
    $socialClass = "";
    if(strpos($url, 'instagram') != false) {
      $socialClass = 'instagram';
    } else if (strpos($url, 'youtube') != false){
      $socialClass = 'youtube'; 
    } else if (strpos($url, 'facebook') != false){
      $socialClass = 'facebook'; 
    } else if (strpos($url, 'twitter') != false){
      $socialClass = 'twitter'; 
    } else if (strpos($url, 'pinterest') != false){
      $socialClass = 'pinterest'; 
    } else if (strpos($url, 'vimeo') != false){
      $socialClass = 'vimeo'; 
    } else if (strpos($url, 'linkedin') != false){
      $socialClass = 'linkedin'; 
    }
    if (!empty($socialClass)) {
      $item['attributes']['class'] = array($socialClass);
    }
  }
}

/**
 * Highlight last menu link when on Floor, House or Overview
 */
function circle_preprocess_menu__main_menu(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node && in_array(
    $node->type->entity->id(), 
    array('rental_floor', 'rental_house', 'rental_overview')
    )
  ) {
    end($variables['items']);
    $lastKey = key($variables['items']);
    $variables['items'][$lastKey]['in_active_trail'] = true;
  }
}

/**
 * Add Theme settings for the circle
 */
function circle_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }
  

  $form['target_time'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Target Time'),
    '#default_value' => theme_get_setting('target_time'),
    '#description'   => t("Timestamp when The Circle launches.. Convert at http://www.unixtimestamp.com")
  );
  
  $form['total_space'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Total Space'),
    '#default_value' => theme_get_setting('total_space'),
    '#description'   => t("Total space that can be sold, in m x m"),
  );
  
  $form['sold_space'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Sold Space'),
    '#default_value' => theme_get_setting('sold_space'),
    '#description'   => t("Space already sold, in m x m")
  );
}

/**
 * Preprocess fields
 */
function circle_preprocess_field(&$variables) {
  $element = $variables['element'];
  if($element['#field_name'] == 'field_stage_content') {
    $time_left = round((theme_get_setting('target_time') - time()) / 60 / 60 / 24);
    $variables['time_left'] = $time_left;
    $variables['time_left_chars'] = str_split($time_left); 
  }
  
  if($element['#field_name'] == 'field_button_link' || $element['#field_name'] == 'field_hero_link') {
    $variables['items'][0]['content']['#attributes']['class'] = ['button'];
  }
}

function circle_preprocess_block(&$variables) {
  $variables['language'] = \Drupal::languageManager()->getCurrentLanguage()->getName();
}

/**
 * Preprocess regions
 */
function circle_preprocess_region(&$variables) {
  $variables['attributes']['class'] = array('region');
  $variables['base_path'] = base_path();
}


/**
 * Preprocess nodes
 */
function circle_preprocess_node(&$vars) {
  $node = $vars['node'];
  
  if ($node->type->entity->id() == 'front_page') {
    $items = [];
    $textBl = $vars['content']['field_text_blocks'];
    $delta = 0;
    while(!empty($textBl[$delta])) {
      $items[] = $textBl[$delta];
      $delta++;
    }
    
    $vars['items'] = $items;
  }
  
  if ($node->type->entity->id() == 'discover_page') {
    $items = [];
    $titles = [];
    $imageUrls = [];
    $labelPositions = [];
    $textBl = $vars['content']['field_page'];
    $delta = 0;
    
    while(!empty($textBl[$delta])) {
      $par = $textBl[$delta]['#paragraph'];
      
      if ($delta == 0) {
        $textBl[$delta]['#view_mode'] = 'special';
        $textBl[$delta]['#cache']['keys'][] = 'special';
      }
      
      if(!empty($par->field_headline) && !empty($par->field_headline->getValue())) {
        $val = $par->field_headline->getValue();
        $titles[] = $val[0]['value'];
      } else {
        $titles[] = '';
      }
      
      if( !empty($par->field_image) ) {
        $imageUrls[] = ImageStyle::load('max_2600x2600')->buildUrl( $par->field_image->entity->getFileUri() );
      } else {
        $imageUrls[] = '';
      }
      
      if(!empty($par->field_label_position) && !empty($par->field_label_position->getValue())) {
        $val = $par->field_label_position->getValue();
        $labelPositions[] = $val[0]['value'];
      } else {
        $labelPositions[] = '';
      }
      
      $items[] = $textBl[$delta];
      $delta++;
    }
    
    $vars['items'] = $items;
    $vars['titles'] = $titles;
    $vars['imageUrls'] = $imageUrls;
    $vars['labelPositions'] = $labelPositions;
  }
  
  $vars['base_path'] = base_path();
}

/**
 * Preprocess page vars
 */
function circle_preprocess_page(&$vars) {
  if(isset($vars['node'])) {
    $node = $vars['node'];
    $vars['show_footer'] = !!($node->type->entity->id() != 'discover_page');
  } else {
    $vars['show_footer'] = true;
  }
}

/**
 * Preprocess paragraphs
 */
function circle_preprocess_paragraph(&$vars) {
  /**
   * Mark images as lazy loading
   */
  if (isset($vars['content']['field_image'][0])) {
    $element = $vars['content']['field_image'];
    $delta = 0;
    while (!empty($element[$delta])) {
      $element[$delta]['#item_attributes'] = array('data-lazy' => true);
      $vars['content']['field_image'][$delta] = $element[$delta];
      if ($delta === 0) {
        $vars['large_image'] = ImageStyle::load('max_2600x2600')->buildUrl( $element[$delta]['#item']->entity->getFileUri() );
      }
      $delta++;
    }
  }
  /**
   * Add data attributes if buttons should trigger an action
   */
  if (isset($vars['content']['field_action'][0]) && isset($vars['content']['field_button_link'][0])) {
    $vars['content']['field_button_link'][0]['#attributes'] = array('data-action' => array($vars['content']['field_action'][0]['#markup']));
  }
  
  $vars['base_path'] = base_path();
  $paragraph = $vars['paragraph'];
  $pid = $paragraph->type->entity->id();
  if ($pid == 'circles_slider') {
    $vars['circles'] = views_embed_view('circle_modules', 'circle_modules_block');
  } else if($pid == 'module_contact') {
    if($vars['elements']['field_show_progress']['#items']->value == '1') {
      $vars['percentage'] = theme_get_setting('sold_space') / theme_get_setting('total_space') * 100;
      $vars['sold_space'] = theme_get_setting('sold_space');
      $vars['total_space'] = theme_get_setting('total_space'); 
    }
    if($vars['elements']['field_show_brands']['#items']->value == '1') {
      $node = \Drupal\node\Entity\Node::load(17);
      $vars['brands'] = node_view($node);
    }
  }
}

/**
 * Add theme suggestions for charts
 */
function circle_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  $paragraph = $variables['elements']['#paragraph'];
  if ($paragraph->type->entity->id() == 'chart_data') {
    $viewmode = $paragraph->getParentEntity()->get('field_type')->value;
    $suggestions[] = $suggestions[] = 'paragraph__' . $paragraph->bundle() . '__' . $viewmode;
  }
  if ($paragraph->type->entity->id() == 'chart') {
    $viewmode = $paragraph->get('field_type')->value;
    $suggestions[] = $suggestions[] = 'paragraph__' . $paragraph->bundle() . '__' . $viewmode;
  }
}

/**
 * Hook preprocess_image
 * Prepare images for Lazy Loading if data-lazy attribute is set
 */
function circle_preprocess_image(&$vars) {
  if(isset($vars['attributes']['data-lazy'])) {
    if (isset($vars['attributes']['srcset'])) {
      $vars['attributes']['data-srcset'] = $vars['attributes']['srcset']->value();
    }
    $vars['attributes']['data-src'] = $vars['attributes']['src'];
    unset($vars['attributes']['srcset']);
    unset($vars['attributes']['src']);
  }
}

/**
 * Add JS variables
 */
function circle_page_attachments_alter(&$build) {
  $build['#attached']['drupalSettings']['circle'] = array(
    'panorama-loadtext' => t('Load panorama')
  );
}

/**
 * Add html vars
 */
function circle_preprocess_html(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node && $node->type->entity->id() == 'module') {
    $variables['color'] = $node->field_color->getValue()[0]['value'];
  }
}
